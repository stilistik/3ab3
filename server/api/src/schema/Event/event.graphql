type Event implements Node {
  id: ID!
  title: String!
  description: String!
  date: DateTime!
  image: String
  flyer: String
  comments: [Comment!]! @isAuthenticated
  supporters: [User!]! @isAuthenticated
  likedBy: [User!]! @isAuthenticated
  owner: User! @isAuthenticated
  todos: [Todo!]! @isAuthenticated
  published: Boolean! @isAuthenticated
}

type EventEdge implements Edge {
  cursor: String!
  node: Event
}

type EventsConnection implements Connection {
  pageInfo: PageInfo!
  edges: [EventEdge]
}

input EventInput {
  title: String!
  description: String!
  date: DateTime!
  image: Upload
  flyer: Upload
}

extend type Query {
  event(eventId: ID!): Event! @isAuthenticated
  events(first: Int = 10, after: String): EventsConnection! @isAuthenticated
  futureEvents(first: Int = 10, after: String): EventsConnection!
  pastEvents(first: Int = 10, after: String):  EventsConnection! @isAuthenticated
  futurePublishedEvents(first: Int = 10, after: String):  EventsConnection!
  pastPublishedEvents(first: Int = 10, after: String):  EventsConnection!
}

extend type Mutation {
  createEvent(input: EventInput!): Event! @isAuthenticated
  deleteEvent(eventId: ID!): Event! @isAuthenticated
  likeEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  unlikeEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  commentEvent(eventId: ID!, text: String!, link: String): Event!
    @isAuthenticated
  supportEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  unsupportEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  publishEvent(eventId: ID!): Event! @isAuthenticated @hasRole
}
