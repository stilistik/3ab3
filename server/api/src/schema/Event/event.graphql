type Event {
  id: ID!
  title: String!
  description: String!
  date: DateTime!
  image: String!
  comments: [Comment!]! @isAuthenticated
  supporters: [User!]! @isAuthenticated
  likedBy: [User!]! @isAuthenticated
  owner: User! @isAuthenticated
  committee: Committee! @isAuthenticated
  todos: [Todo!]! @isAuthenticated
  published: Boolean! @isAuthenticated
}

input EventInput {
  title: String!
  description: String!
  date: DateTime!
  image: Upload
}

extend type Query {
  events: [Event!]!
  event(eventId: ID!): Event!
  futureEvents(now: DateTime!): [Event!]!
  pastEvents(now: DateTime!): [Event!]!
}

extend type Mutation {
  createEvent(input: EventInput!): Event! @isAuthenticated
  deleteEvent(eventId: ID!): Event! @isAuthenticated
  likeEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  unlikeEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  commentEvent(eventId: ID!, text: String!, link: String): Event! @isAuthenticated
  supportEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  unsupportEvent(eventId: ID!, userId: ID!): Event! @isAuthenticated
  publishEvent(eventId: ID!): Event! @isAuthenticated @hasRole
}
