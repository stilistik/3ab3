type User {
  id: ID!
  email: String!
  name: String!
  firstName: String
  lastName: String
  phone: String
  birthdate: DateTime
  language: String
  avatar: String
  purchases: [Purchase!]!
  payments: [Payment!]!
  transactions(
    type: TransactionType
    first: Int!
    skip: Int
    after: String
  ): TransactionConnection
  transactionCount: Int!
  items: [Item!]!
  balance: Float!
  role: UserRole!
  posts: [Post!]!
  events: [Event!]!
  likedPosts: [Post!]!
  likedEvents: [Event!]!
  supportedEvents: [Event!]!
  comments: [Comment!]!
  likedComments: [Comment!]!
  isOnline: Boolean!
  lastOnline: DateTime
  chats: [Chat!]!
  unreadMessages: Int!
  consumptions: [ProductConsumption!]!
  deleted: Boolean!
}

enum UserRole {
  SUPER
  ADMIN
  MEMBER
}

input UserInput {
  name: String
  email: String
  role: UserRole
  phone: String
  birthdate: DateTime
  firstName: String
  lastName: String
}

input EditSelfInput {
  name: String
  email: String
  phone: String
  birthdate: DateTime
  avatar: Upload
  language: String
}

extend type Query {
  users: [User!]!
  roles: [String!]!
  user(userId: ID!): User!
  currentUser: User!
  usersWithDebt(threshold: Int!): [User!]! @hasRole
  deletedUsers: [User!]!
}

extend type Mutation {
  editSelf(input: EditSelfInput!): User!
  uploadAvatar(file: Upload!): User!
  setOnlineStatus(userId: ID!, isOnline: Boolean!): User!
  createUser(input: UserInput!): User! @hasRole
  editUser(userId: ID!, input: UserInput!): User! @hasRole
  deleteUser(userId: ID!): User! @hasRole
  restoreUser(userId: ID!): User! @hasRole
}
