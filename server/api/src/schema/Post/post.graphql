type Post implements Node @isAuthenticated {
  id: ID!
  text: String!
  image: String
  author: User!
  likedBy: [User!]!
  comments: [Comment!]!
  date: DateTime!
}

interface Node {
  id: ID
}

interface Edge {
  cursor: String!
  node: Node
}

type PageInfo {
  hasNextPage: Boolean!
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge]
}

type PostEdge implements Edge {
  cursor: String!
  node: Post
}

# Patient page with pagination infomation and patient edges
type PostsConnection implements Connection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}


input PostInput {
  userId: ID!
  text: String
  image: Upload
}

extend type Query {
  posts: [Post!]!
  post(postId: ID!): Post!
  feed(first: Int = 10, after: String): PostsConnection
}

extend type Mutation {
  createPost(input: PostInput!): Post!
  deletePost(postId: ID!): Post!
  likePost(userId: ID!, postId: ID!): Post!
  unlikePost(userId: ID!, postId: ID!): Post!
  commentPost(postId: ID!, text: String! ): Post!
}
