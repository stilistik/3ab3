type Post implements Node {
  id: ID!
  text: String!
  image: String
  link: String
  author: User!
  likedBy: [User!]!
  comments: [Comment!]!
  date: DateTime!
}

type PostEdge implements Edge {
  cursor: String!
  node: Post
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

input PostInput {
  userId: ID!
  text: String
  image: Upload
  link: String
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

extend type Query {
  posts: [Post!]!
  post(postId: ID!): Post!
  feed(first: Int = 10, after: String): PostsConnection
}

extend type Mutation {
  createPost(input: PostInput!): Post!
  deletePost(postId: ID!): Post!
  likePost(userId: ID!, postId: ID!): Post!
  unlikePost(userId: ID!, postId: ID!): Post!
  commentPost(postId: ID!, text: String!, link: String): Post!
}

extend type Subscription {
  postCreated: PostSubscriptionPayload!
}
