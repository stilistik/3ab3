type Message implements Node {
  id: ID!
  text: String!
  link: String
  from: User!
  chat: Chat!
  date: DateTime!
}

type MessageEdge implements Edge {
  cursor: String!
  node: Message
}

type MessageConnection implements Connection {
  pageInfo: PageInfo!
  edges: [MessageEdge]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
}

input MessageInput {
  chatId: ID!
  fromId: ID!
  text: String!
  link: String
}

extend type Query {
  messages(
    chatId: ID!
    first: Int!
    after: String
    skip: Int
  ): MessageConnection!
}

extend type Mutation {
  createMessage(input: MessageInput): Message!
}

extend type Subscription {
  onNewMessage(chatId: ID!): MessageSubscriptionPayload!
}
