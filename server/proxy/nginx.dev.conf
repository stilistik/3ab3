load_module /etc/nginx/modules/ngx_http_image_filter_module.so;
user nobody nogroup;
worker_processes auto; # auto-detect number of logical CPU cores

events {
	worker_connections 512; # set the max number of simultaneous connections (per worker process)
}


http {

	include /etc/nginx/mime.types;

	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# Cache settings
	proxy_cache_path /tmp/nginx-images-cache/ levels=1:2 keys_zone=images:10m inactive=24h max_size=100m;


	# Internal image resizing server.
	server {
		server_name localhost;
		listen 8888;

		location ~ "^/cdn/(?<image>.+)@(?<width>[0-9].*)$" {
			alias /usr/src/app/storage/$image;
			image_filter resize $width -;
			image_filter_jpeg_quality 80;
			image_filter_buffer 8M;
		}
	}

	# Main server
	server {
		listen 4000;
		charset utf-8;
		client_max_body_size 256M;

		location ~ "^/cdn/(?<image>.+)@(?<width>[0-9].*)$" {
			proxy_pass http://proxy:8888/cdn/$image@$width;
			proxy_cache images;
			proxy_cache_valid 200 24h;
		}

		location /media {
			proxy_pass http://proxy:8888/;
		}

		location /auth/passwordless/debugsession {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/passwordless/request {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/passwordless/login {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/token {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/requestReset {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /auth/resetPassword {
			proxy_pass http://api:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header X-Original-METHOD $request_method;
			proxy_cache_bypass $http_upgrade;
		}

		location /api {
			proxy_pass http://api:4000;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}

		location /graphql {
			proxy_pass http://api:4000/graphql;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
		}
	}
}
